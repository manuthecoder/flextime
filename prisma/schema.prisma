generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Imported from NextAuth docs
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Imported from NextAuth docs
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id Int @id @default(autoincrement())

  // 9 digit student ID
  studentId String? @unique

  // List of appointments
  appointments Appointment[]

  // Student information
  name  String?
  email String? @unique

  // Not used, but required for NextAuth.js
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlexChoice {
  id Int @id @default(autoincrement())

  // Teacher name
  name String? @db.VarChar(300)

  // Teacher email
  email String? @unique @db.VarChar(300)

  // Display on appointment list?
  displayOnList Boolean? @default(true)

  // List of appointments
  appointments Appointment[]

  // Maximum number of appointments
  maxAppointments Int? @default(25) @db.Int

  // Appointment banner
  appointmentBanner String? @db.VarChar(300)
}

model Appointment {
  // Unique appointment ID
  id Int @id @default(autoincrement())

  // Who is the appointment for?
  flex       Int
  flexChoice FlexChoice @relation(fields: [flex], references: [id])

  // Is the appointment set by the teacher?
  teacherCreated Boolean @default(false)

  // Student information
  student   User @relation(fields: [studentId], references: [id])
  studentId Int

  // When is the appointment?
  date String

  // Was the appointment attended?
  attended Boolean? @default(false)
}
